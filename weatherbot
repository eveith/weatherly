#!/usr/bin/env ruby

require 'cinch'
require 'optparse'
require 'weatherly'


MODES = {
  weewx: Weatherly::WeewxSource,
  averager: Weatherly::Averager
}


options = OpenStruct.new({
  nick: 'Weatherly' })


OptionParser.new do |opts|
  opts.banner = "Weatherly - A Weewx-to-IRC weather bot\n" +
    "Usage: weatherbot [--mode MODE] " +
    "[--server SERVER] [--channel CHANNEL] " +
    "[options ...]"

  opts.on '-sSERVER', '--server=SERVER', 'IRC server to connect to' do |v|
    options.server = v
  end

  opts.on '-cCHANNEL', '--channel=CHANNEL', 'IRC channel to join to' do |v|
    options.channel = v
  end

  opts.on '-mMODE', '--mode=MODE',
      'Set bot mode; one of "weewx" or "averager"' do |v|
    mode = v.to_sym

    if ! [:weewx, :averager].include? mode then
      $stderr.puts "ERROR: Mode must be one of \"weewx\" or \"averager\", " +
        "but #{mode} was given."
      exit 1
    end

    options.mode = MODES[mode]
  end

  opts.on '-SSOURCE', '--source=SOURCE',
      "The bot's data source, dependent on its mode. " +
        "If the mode is \"weewx\", this designates the Weewx RSS feed, " +
        "if the mode is \"averager\", this designates the name of the " +
        "source bot." do |v|
    options.source = v
  end

  opts.on '-NNICK', '--nick=NICK', 'Nick of the bot (default: Weatherly)' do |v|
    options.nick = v
  end

  opts.on '-h', '--help', 'This help' do
    puts opts
    exit 0
  end
end.parse!


if ! options.server then
  $stderr.puts "ERROR: No IRC server given."
  exit 1
end

if ! options.channel then
  $stderr.puts "ERROR: No channel given."
  exit 1
end

if ! options.mode then
  $stderr.puts "ERROR: No mode given."
  exit 1
end


Cinch::Bot.new do
  configure do |c|
    c.nick      = options.nick
    c.server    = options.server
    c.channels  = [ options.channel ]
    c.plugins.plugins = [ options.mode ]
    c.plugins.options[ options.mode ] = { source: options.source }
  end

  on :join do |m|
    m.reply "Hello! I am your friendly weather bot.  :)"
  end
end.start
